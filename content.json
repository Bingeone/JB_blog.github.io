{"pages":[{"title":"about","text":"About me name : wangjingbi 园龄: 1年 SEX：男","link":"/about/index.html"}],"posts":[{"title":"Hexo嵌入B站视频","text":"视频嵌入测试方式一","link":"/posts/1372953673.html"},{"title":"Markdown基本使用","text":"文章中图片排版格式 横向排列 12345&lt;div class=&quot;img-x&quot;&gt;-----留空格-----![图片链接](url)-----留空格-----&lt;/div&gt; 竖向排列 12345&lt;div class=&quot;img-y&quot;&gt;-----留空格-----![图片链接](url)-----留空格-----&lt;/div&gt; 横竖排列 12345&lt;div class=&quot;justified-gallery&quot;&gt;-----留空格-----![图片链接](url)-----留空格-----&lt;/div&gt; Markdown图片排版在Hexo注意问题 修改gallery.js文件(没有该文件的新建)： 12345678910111213141516171819// themes/icarus/source/js/gallery.js$(function(){ if (typeof ($.fn.justifiedGallery) === 'function') {+ let justifiedGallery = $('.justified-gallery')+ if(justifiedGallery.length &gt; 0) {+ for (let i = 0; i &lt; justifiedGallery.length; i ++){+ let html = justifiedGallery[i].childNodes[0].innerHTML+ justifiedGallery[i].innerHTML = html+ }+ }+ justifiedGallery.justifiedGallery({ cssAnimation: true, imagesAnimationDuration: 1000 }); } if (typeof ($.fn.lightGallery) === 'function') { $('.article').lightGallery({ selector: '.gallery-item' }); }}) 全局配置hexo文件，在**_config.yml**中添加如下 123456789# 压缩 jsneat_js: enable: true mangle: true output: compress: exclude: #设置忽略压缩文件 - '**/gallery.js' - '**/back-to-top.js' markdown图片排版问题详情 可以参考该博客链接 彩色标题带 粉红色彩带 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-danger&quot;&gt;{% endraw %}-----内容-----{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-danger&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}-----内容-----{% raw %}&lt;/div&gt;{% endraw %} 淡蓝色彩带 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-info&quot;&gt;{% endraw %}-----内容-----{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}-----内容-----{% raw %}&lt;/div&gt;{% endraw %}","link":"/posts/3133288005.html"},{"title":"Linux 基础知识","text":"ubuntu 使用技巧 mkdir的技巧 12345#创建 ～/a/b/cmkdir -p ~/a/b/c/#创建多个文件夹mkdir a b c touch 12345#创建文件touch a.txt#在绝对路径中创建文件touch /home/robot/myfile.txt rm 删除 12345#删除文件rm a.txt#删除文件夹rm -rf a或者 trash-put a #将文件移动到回收站 需安装trash-cli cp 复制 12#复制文件夹到指定位置cp -r myfile/ /home/robot/ mv 移动或重命名文件 12345#移动文件夹到指定位置mv myfile /home/robot#重命名文件夹mv myfile myfile01 man 查看linux命令手册 12345#查看ls手册man ls #查看帮助reboot help cd reboot 重启linux系统 shutdown 立即关机 12# 立即关机shotdown -h now ctrl + - 缩小命令行字体大小，ctrl + shift + + 放大 ctrl + alt + T 在桌面快速启动终端 ls -lah 查看当前目录下所有文件详情 time 加执行文件，可以计时运行文件消耗时间 查看ubuntu 挂载详情 df -h 切换用户：su root 更新linux环境：source /etc/environment 软链接如：sudo ln -fs /usr/bin/npm /usr/local/bin/npm linux 端口占用查看和关闭 1234567891011121314151617181920#查看已经连接的服务端口（ESTABLISHED）netstat -a#查看所有的服务端口（LISTEN，ESTABLISHED）netstat -ap#查看指定端口，可以结合grep命令：netstat -ap | grep 8000#还可以使用lsof命令：lsof -i:4000#关闭正在使用端口的程序，用kill + 对应的pidkill -9 pid(号) pip 下载镜像源 123456789#使用方法：pip install requsets -i https://pypi.tuna.tsinghua.edu.cn/simple/ Scipy#镜像源列表：https://mirrors.aliyun.com/pypi/simple/ //阿里https://pypi.tuna.tsinghua.edu.cn/simple/ //清华https://pypi.douban.com/ //豆瓣https://pypi.hustunique.com/ //华中理工大学https://pypi.sdutlinux.org/ //山东理工大学https://pypi.mirrors.ustc.edu.cn/ //中国科学技术大学 ubuntu 系统命令行设置投屏显示 12345678# 使用单显示屏---关闭笔记电脑屏幕（即主屏 LVDS-1不同笔记本可能不一样有eDP-1端口等）xrandr --output LVDS-1 --off #扩展屏幕模式xrandr --output HDMI-1 --right-of LVDS-1 --auto# 切回主屏命令（或者直接合上笔记本再打开）xrandr --output LVDS-1 --auto ​ Ubuntu系统笔记本投屏显示器方法—参考 在linux中制作desktop快捷链接方式 12345678910111213141516171819202122#新建一个连接程序vim typora.desktop[DesktopEntry]Name=Typora#打开软件路径Exec=/opt/Typora/bin/Typora-linux-x64/Typora #类型Type=Application #图标位置Icon=opt/Typora/bin/Typora-linux-x64/resources/assets/iconicon_512x512.png #将程序拷贝到目标地址cp typora.desktop /usr/share/applications/ #将可执行的程序链接到终端的可执行命令，即配置环境ln -s /home/robot/software/Typora/bin/Typora-linux-x64/Typora /usr/sbin/#更改可执行权限(在./Typora文件中)chown root.rootchrome-sandboxchmod 755 chrome-sandbox Linux 系统目录结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172731. / ：根每一个文件和目录从根目录开始。只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录，这与/不一样2. /bin ：用户二进制文件包含二进制可执行文件。在单用户模式下，你需要使用的常见Linux命令都位于此目录下。系统的所有用户使用的命令都设在这里。例如：ps、ls、ping、grep、cp3. /sbin ：系统二进制文件就像/bin，/sbin同样也包含二进制可执行文件。但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、ifconfig、swapon命令4. /etc ：配置文件包含所有程序所需的配置文件。也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如：/etc/resolv.conf、/etc/logrotate.confhosts：设备名称（或域名）到ip地址的解析，相当于本地存在的dns功能。5. /dev ：设备文件包含设备文件。这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon06. /proc ：进程信息包含系统进程的相关信息。这是一个虚拟的文件系统，包含有关正在运行的进程的信息。例如：/proc/{pid}目录中包含的与特定pid相关的信息。这是一个虚拟的文件系统，系统资源以文本信息形式存在。例如：/proc/uptime7. /var ：变量文件var代表变量文件。这个目录下可以找到内容可能增长的文件。这包括 - 系统日志文件（/var/log）;包和数据库文件（/var/lib）;电子邮件（/var/mail）;打印队列（/var/spool）;锁文件（/var/lock）;多次重新启动需要的临时文件（/var/tmp）;8. /tem ：临时文件包含系统和用户创建的临时文件。当系统重新启动时，这个目录下的文件都将被删除。9. /usr ：系统应用程序包含二进制文件、库文件、文档和二级程序的源代码。/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。/usr/lib中包含了/usr/bin和/usr/sbin用到的库。/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。10. /home ：HOME 目录所有用户用home目录来存储他们的个人档案。例如：/home/robot/11. /boot ：引导加载程序文件包含引导加载程序相关的文件。内核的initrd、vmlinux、grub文件位于/boot下。例如：initrd.img-2.6.32-24-generic、vmlinuz-2.6.32-24-generic12. /lib ：系统库包含支持位于/bin和/sbin下的二进制文件的库文件.库文件名为 ld或lib.so.*例如：ld-2.11.1.so，libncurses.so.5.713. /opt代表可选的。包含从个别厂商的附加应用程序。附加应用程序应该安装在/opt/或者/opt/的子目录下。14 /mnt ：挂载目录临时安装目录，系统管理员可以挂载文件系统。15 /media ：可移动媒体设备用于挂载可移动设备的临时目录。举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;16 /srv ：服务数据srv代表服务。包含服务器特定服务相关的数据。例如，/srv/cvs包含cvs相关的数据。 SSH 协议 123456# 在 ~/.bashrc 文件中配置如下命令：alias name01 = &quot;ssh root@192.168.17.2&quot;注：在终端中输入 name01相当于ssh root@192.168.17.2,其中alias是别名执行过程中需要输入远程许可密码，可以使用ssh-keygen生成本地秘钥，然后将该秘钥复制到远程服务器的authorized_keys文件（在 ~/.ssh位置），内容追加方式添加。 开启ssh远程登陆—在ubuntu上配置流程 123456789101112131415161718192021222324252627282930313233# 下载 opnessh-serversudo apt update //更新源文件sudo apt upgrate //更新软件，升级包文件sudo apt install openssh-server //下载ssh第三包# 激活和参看ssh状态sudo systemctl enable ssh //激活sudo systemctl start ssh //启动sudo systemctl status ssh //查看ssh网络状态#设置firewall允许ssh端口(默认port 22)sudo ufw allow ssh //sudo ufw allow|deny [service] 开启或禁用某个服务sudo ufw enable // 重启firewallsudo ufw status#查看本机网络ip及用户名ifconfigwhoami#在其他平台上通过远程连接工具(xshell等)登陆ubuntussh username@ip //需要输入登陆ubuntu该用户的密码#-------------------------其他操作-------------------------#更改端口号sudo vim /etc/ssh/sshd_config //将port 22 更改成1024之后的端口如(port 2222)，取消#号注释#重启sshsudo /etc/init.d/ssh restart sudo service ssh restart#查看服务状态ps ax | grep sshsudo netstat -ant // 查看与外部连接端口情况#用root账号密码远程登陆需要设置sudo password root (密码) //重置密码sudo vim /etc/ssh/sshd_config //取消root登陆限制，更改成PermitRootLogin yessudo service ssh restart //重启","link":"/posts/5655611541.html"},{"title":"python学习笔记","text":"python内置函数 abs() #取绝对值 1234567#abs()是python内置函数,而fabs()是math中的一个模块#fabs() 函数只适用于 float 和 integer 类型，而 abs() 也适用于复数。import mathd = 1+1.0je = 3+4.0jprint(f&quot;d的绝对值:&quot;,abs(d)) #结果为1.4142135623730951print(f&quot;e的绝对值:&quot;,math.fabs(e)) #结果会报错TypeError: can't convert complex to float dict() #创建一个字典 123456789&gt;&gt;&gt; dict() #创建字典{}&gt;&gt;&gt; dict(a=&quot;a&quot;,b=&quot;b&quot;,c=&quot;c&quot;) #key-alue 传入参数{'a': 'a', 'b': 'b', 'c': 'c'}&gt;&gt;&gt; dict(zip([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;])) #映射函数方式创建字典{'a': 'A', 'b': 'B', 'c': 'C'}&gt;&gt;&gt; dict([(&quot;one&quot;,1),(&quot;two&quot;,2),(&quot;three&quot;,3)]) #可迭代对象来构造字典，列表为iterable{'one': 1, 'two': 2, 'three': 3} help () #参看对象的帮助信息 1234567891011&gt;&gt;&gt;help('sys') # 查看 sys 模块的帮助……显示帮助信息…… &gt;&gt;&gt;help('str') # 查看 str 数据类型的帮助……显示帮助信息…… &gt;&gt;&gt;a = [1,2,3]&gt;&gt;&gt;help(a) # 查看列表 list 帮助信息……显示帮助信息…… &gt;&gt;&gt;help(a.append) # 显示list的append方法的帮助 min () #返回给定参数的最小值 12&gt;&gt;&gt; print (&quot;min(80, 103, 1440) : &quot;, min(80, 103, 1440))min(80, 103, 1440) : 80 setattr() #设置属性值，属性不一定存在 123456789&gt;&gt;&gt; class A():... bar = 1... &gt;&gt;&gt; a = A()&gt;&gt;&gt; getattr(a,&quot;bar&quot;) #获取属性bar值1&gt;&gt;&gt; setattr(a,&quot;b&quot;,2) #设置属性b值&gt;&gt;&gt; a.b2 all() #用于判断给定的可迭代对象iterable中所有元素是否都为True，元素除了是 0、空、None、False 外都算 True。 1234567891011121314151617#iterable 是元组或列表 空元组、空列表返回值为True，这里要特别注意。&gt;&gt;&gt; all(['a','b','c','d']) # 列表list，元素都不为空或0True&gt;&gt;&gt; all(['a','b','','d']) # 列表list，存在一个空的元素False&gt;&gt;&gt; all([0,2,3,4]) # 列表list，存在一个为0的元素False&gt;&gt;&gt; all(('a','b','c','d')) # 元组tuple，元素都不为空或0True&gt;&gt;&gt; all(('a','b','','d')) # 元组tuple，存在一个空的元素False&gt;&gt;&gt; all((0,1,2,3)) # 列表list，存在一个为0的元素False&gt;&gt;&gt; all([]) # 空列表True&gt;&gt;&gt; all(()) # 空元组True dir() #函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。 12&gt;&gt;&gt;dir() # 获取当前模块的属性列表&gt;&gt;&gt;dir([]) # 参看列表的方法 hex() #函数用于将一个指定数字转换为 16 进制数,返回的是一个字符串，以0x开头 12345678&gt;&gt;&gt; hex(255)'0xff'&gt;&gt;&gt; hex(-42)'-0x2a'&gt;&gt;&gt; hex(12)'0xc'&gt;&gt;&gt; type(hex(12)) #查看类型&lt;class 'str'&gt; next() #返回迭代器的下一个项目，和生成迭代器的 iter() 函数一起使用 1234567891011121314&gt;&gt;&gt; li=[3,6,4,63,5]&gt;&gt;&gt; it = iter(li) #首先获得Iterator对象&gt;&gt;&gt; while True:... y =next(it,&quot;aa&quot;)... print(y)... if y == &quot;aa&quot;:... break...364635aa slice() #函数实现切片对象，主要用在切片操作函数里的参数传递 slice(start, stop[, step])—step间距 123456789101112&gt;&gt;&gt; myslice = slice(3) # 设置截取3个元素的切片&gt;&gt;&gt; mysliceslice(None, 3, None)&gt;&gt;&gt; arr = list(range(6))&gt;&gt;&gt; arr[0,1,2,3,4,5] &gt;&gt;&gt; arr[myslice] # 截取 3 个元素[0,1,2]&gt;&gt;&gt;myslice1 = slice(0,7,2)&gt;&gt;&gt;arr1 = list(range(10))&gt;&gt;&gt;arr1[myslice1][0, 2, 4, 6] any() #函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True 1234567891011121314151617#如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。&gt;&gt;&gt;any(['a', 'b', 'c', 'd']) # 列表list，元素都不为空或0True&gt;&gt;&gt; any(['a', 'b', '', 'd']) # 列表list，存在一个为空的元素True&gt;&gt;&gt; any([0, '', False]) # 列表list,元素全为0,'',falseFalse&gt;&gt;&gt; any(('a', 'b', 'c', 'd')) # 元组tuple，元素都不为空或0True&gt;&gt;&gt; any(('a', 'b', '', 'd')) # 元组tuple，存在一个为空的元素True&gt;&gt;&gt; any((0, '', False)) # 元组tuple，元素全为0,'',falseFalse&gt;&gt;&gt; any([]) # 空列表False&gt;&gt;&gt; any(()) # 空元组False divmod() #接受两个非复数类型的数字，返回商和余数的元组 123456&gt;&gt;&gt; divmod(7,2) //相当于（a//b,a%b）(3, 1)&gt;&gt;&gt; divmod(3,-1.3)(-3.0, -0.9000000000000001)&gt;&gt;&gt; divmod(6,-2)(-3, 0) id() #获取对象的内存地址 1234567891011121314151617181920&gt;&gt;&gt; aa=1&gt;&gt;&gt; id(aa)9788608&gt;&gt;&gt; bb=1 &gt;&gt;&gt; id(bb)9788608&gt;&gt;&gt; a=&quot;whoami&quot;&gt;&gt;&gt; id(a)140185507204528#-------注意--------#在对象内存数字类型较小时，对象的内存地址是一样的，一般情况不一样&gt;&gt;&gt; a = 1234&gt;&gt;&gt; id(a)140185507593328&gt;&gt;&gt; b = 1234&gt;&gt;&gt; id(b)140185507593424&gt;&gt;&gt; b = a&gt;&gt;&gt; id(b)140185507593328 object() #对象，类默认的对象 sorted() #对可迭代的对象(列表，元组)进行排列 12345678910111213141516171819202122232425# sort 和 sorted区别：# sort 对原来的列表排序操作，sorted 对可迭代对象操作并生成新的列表&gt;&gt;&gt; sorted([4,7,2,8])[2, 4, 7, 8]&gt;&gt;&gt; a = [4,7,2,8]&gt;&gt;&gt; a.sort()&gt;&gt;&gt; a[2, 4, 7, 8]#----------sorted常用-------------&gt;&gt;&gt; sorted({1:&quot;d&quot;,2:&quot;b&quot;,3:&quot;c&quot;,4:&quot;a&quot;}) //接受任何的iterable[1, 2, 3, 4]&gt;&gt;&gt; li = [5,9,3,2,6,8]&gt;&gt;&gt; result_li=sorted(li, key = lambda y:y*-1) //将序&gt;&gt;&gt; result_li[9, 8, 6, 5, 3, 2]&gt;&gt;&gt; sorted(li, reverse = True)[9, 8, 6, 5, 3, 2]&gt;&gt;&gt; sorted(li, reverse = False)[2, 3, 5, 6, 8, 9]#------------实例应用------------# score降序排列，同条件下对name升序&gt;&gt;&gt; d1 = [{'name':'alice', 'score':38}, {'name':'bob', 'score':18}, {'name':'darl', 'score':28}, {'name':'christ', 'score':28}]&gt;&gt;&gt; ll = sorted(d1, key = lambda x:(-x[&quot;score&quot;],x[&quot;name&quot;]))&gt;&gt;&gt; ll[{'name': 'alice', 'score': 38}, {'name': 'christ', 'score': 28}, {'name': 'darl', 'score': 28}, {'name': 'bob', 'score': 18}] ascii() #返回表示对象的字符串，对于字符串中的非 ASCII 字符则返回通过 repr() 函数使用 \\x, \\u 或 \\U 编码的字符 1234&gt;&gt;&gt; ascii('whoami') //与repr()用法相似&quot;'whoami'&quot;&gt;&gt;&gt; print(repr('#'))'#' enumerate() #用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中 1234567891011121314151617181920212223#--------列出数据的下标和它本身--------&gt;&gt;&gt; li = ['Spring','Summer','Fall','Winter']&gt;&gt;&gt; list(enumerate(li))[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]&gt;&gt;&gt; list(enumerate(li,start=2))[(2, 'Spring'), (3, 'Summer'), (4, 'Fall'), (5, 'Winter')]#---------在for中的应用---------&gt;&gt;&gt; i = 1&gt;&gt;&gt; li = ['one','two','three','four']&gt;&gt;&gt; for element in li:... print(i, li[i])... i +=1... 1 two2 three3 four#或者for i, element in enumerate(li): print(i, element)0 one1 two2 three3 four input() #接受一个标准输入数据，返回string数据类型 1234567891011121314151617181920&gt;&gt;&gt; aa = input(&quot;&gt;&gt;&gt;:&quot;)&gt;&gt;&gt;:123&gt;&gt;&gt; type(aa) //查看aa对象的类型&lt;class 'str'&gt;&gt;&gt;&gt; bb = input(&quot;&gt;&gt;&gt;:&quot;)&gt;&gt;&gt;:string&gt;&gt;&gt; type(bb)&lt;class 'str'&gt;#-------接受多个值-------&gt;&gt;&gt; a,b,c = (input(&quot;请输入三角形三边的长：&quot;).split())请输入三角形三边的长：3 4 5&gt;&gt;&gt; a = int(a)&gt;&gt;&gt; b = int(b)&gt;&gt;&gt; c = int(c)&gt;&gt;&gt; p = (a+b+c)/2&gt;&gt;&gt; p6.0&gt;&gt;&gt; s = (p*(p-a)*(p-b)*(p-c))**0.5&gt;&gt;&gt; print(f&quot;三角形的面积为:{s}&quot;)三角形的面积为:6.0 oct() #将整数转化成8进制字符串，以==0o==作为前缀 1234&gt;&gt;&gt; oct(12)'0o14'&gt;&gt;&gt; oct(1)'0o1' staticmethod #返回函数的静态方法 12345678910&gt;&gt;&gt; class A(object):... @staticmethod... def f():... print(&quot;hello&quot;)... &gt;&gt;&gt; A.f() // 无实例调用函数hello&gt;&gt;&gt; cobj = A() // 实例化后调用&gt;&gt;&gt; cobj.f()hello bin()","link":"/posts/1847936831.html"},{"title":"视频页测试","text":"视频页面测试二视频插入方式1234wdbdwqjhwdqwewqedwqwd","link":"/posts/3282361534.html"}],"tags":[{"name":"B站","slug":"B站","link":"/tags/B%E7%AB%99/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Typora","slug":"Typora","link":"/tags/Typora/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"python3","slug":"python3","link":"/tags/python3/"},{"name":"程序","slug":"程序","link":"/tags/%E7%A8%8B%E5%BA%8F/"}],"categories":[{"name":"视频","slug":"视频","link":"/categories/%E8%A7%86%E9%A2%91/"},{"name":"软件","slug":"软件","link":"/categories/%E8%BD%AF%E4%BB%B6/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"}]}